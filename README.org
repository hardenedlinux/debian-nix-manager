#+TITLE: Hardenedlinux User's Debian nix home-manager configuration
#+AUTHOR: GTrunSec
#+EMAIL: gtrunsec@hardenedlinux.org
#+DATE:  6 March 2020
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en cn
#+SETUPFILE: ~/Documents/my-blog/public/theme/org-html-themes/setup/theme-readtheorg.setup
#+hugo_publishdate: (0 5)
#+hugo_auto_set_lastmod: t
#+HUGO_categories:
#+HUGO_tags:
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
* Deploy
#+begin_src sh :async t :exports both :results output
mkdir -p ~/.doom.d/
mkdir -p ~/.doom.d/autoload
mkdir -p ~/.doom.d/etc
mkdir -p ~/.doom.d/modules/private/my-code
mkdir -p ~/.doom.d/modules/private/my-org
#+end_src

* Install nix
#+begin_src sh :async t :exports both :results output
wget https://github.com/hardenedlinux/NSM-data-analysis/releases/download/nix/nix_2.3_master_e3eecb5_amd64.deb
sudo dpkg -i nix_2.3_master_e3eecb5_amd64.deb
sudo ln -s /opt/nix-multiuser/nix/bin/nix* /usr/local/bin

nix-channel --add https://github.com/NixOS/nixpkgs/archive/master.tar.gz nixpkgs
nix-channel --update
export NIX_PATH="$HOME/.nix-defexpr/channels"
export NIX_PATH=$HOME/.nix-defexpr/channels${NIX_PATH:+:}$NIX_PATH
export TERM=xterm

#+end_src

#+begin_src sh :async t :exports both :results output
nix-shell -p 'git'
git clone https://github.com/hardenedlinux/debian-nix-manager.git ~/.config/nixpkgs/
#+end_src

* Install home-manager
#+begin_src sh :async t :exports both :results output
nix-env -i home-manager
#+end_src

add home-manager channel
#+begin_src sh :async t :exports both :results output
nix-channel --add https://github.com/rycee/home-manager/archive/master.tar.gz home-manager
nix-channel --update
#+end_src

- For China's region users

set substituters to ~~/.config/nix/nix.conf~
#+begin_src sh :async t :exports both :results output
substituters = https://mirrors.tuna.tsinghua.edu.cn/nix-channels/store https://cache.nixos.org
#+end_src

* Build
#+begin_src sh :async t :exports both :results output
home-manager switch
#+end_src
* Install doom emacs

#+begin_src sh :async t :exports both :results output
git clone https://github.com/GTrunSec/doom-emacs.git ~/.emacs.d
#+end_src

#+begin_src sh :async t :exports both :results output
~/.emacs.d/bin/doom refresh
cd ~/.doom
make complie
#+end_src

* Install cachix
#+begin_src sh :async t :exports both :results output
nix-env -iA cachix -f https://cachix.org/api/v1/install
sudo mkdir -p /etc/nix
echo "trusted-users = root $USER" | sudo tee -a /etc/nix/nix.conf
sudo pkill nix-daemon
cachix use nsm-data-analysis
sudo systemctl restart nix-daemon.service
#+end_src

** Build NSM-data-analysis
clone https://github.com/hardenedlinux/NSM-data-analysis
#+begin_src sh :async t :exports both :results output
git clone https://github.com/hardenedlinux/NSM-data-analysis
cd NSM-data-analysis/
nix-build --option substituters "https://cache.nixos.org https://nsm-data-analysis.cachix.org"
#+end_src

* Start pkgs service
** [[https://github.com/tenzir/vast][tenzir/vast: Visibility Across Space and Time]] :database:siem:
#+begin_src sh :async t :exports both :results output
 systemctl --user start vast.service
 systemctl --user status vast.service
#+end_src

#+RESULTS:
: ● vast.service
:    Loaded: loaded (/nix/store/59sx0prx1fi93653kkgcsdr4schqa7bv-vast.service/vast.service; enabled; vendor preset: enabled)
:    Active: active (running) since Fri 2020-03-13 03:17:56 EDT; 1h 9min ago
:  Main PID: 28612 (vast)
:    CGroup: /user.slice/user-1000.slice/user@1000.service/vast.service
:            └─28612 /nix/store/n6vm1zifpl65445k6w866sf109j2imwm-vast/bin/vast -c /nix/store/kg43s4bdarkg3g79kxii3h9cmbfym2sj-vast.conf start
* Deploy zeek with nix-shell

run ~nix-shell~~ to build Zeek
if you want use ~make~ by nix own. make sure you have nix/bin/path/ on ~sudoers~

- /etc/sudoers
#+BEGIN_EXAMPLE
# echo $HOME/.nix-profile/bin
# /home/test/.nix-profile/bin

Defaults        secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/home/test/.nix-profile/bin"
#+END_EXAMPLE



#+begin_src sh :async t :exports both :results output
nix-shell ~/.config/nixpkgs/pkgs/zeek/zeek-shell.nix --command "make -j8 all && sudo make install"
#+end_src

using ~zeekctl~ deploy node

#+begin_src sh :results output
sudo /usr/local/zeek/bin/zeekctl deploy
#+end_src
DONE FOR TEST
#+BEGIN_EXAMPLE
 sudo /usr/local/zeek/bin/zeekctl status                                                                                      220:53:41
Name         Type       Host          Status    Pid    Started
zeek         standalone localhost     running   13644  14 Mar 20:53:40
debian-nix :: share/zeekctl/scripts
#+END_EXAMPLE
**  Install Zeek PLugin postgresql
run nix-shell to install
#+begin_src sh :async t :exports both :results output
nix-shell ~/.config/nixpkgs/pkgs/zeek/plugin-PostgreSQL.nix --command "make -j8 all && sudo make install"
#+end_src


test DONE
#+begin_src sh :async t :exports both :results output
/usr/local/zeek/bin/zeek -N Johanna::PostgreSQL
#+end_src

#+RESULTS:
: Johanna::PostgreSQL - PostgreSQL log writer and input reader (dynamic, version 0.2.0)
* DAtabase
** postgresql
#+begin_src sh :async t :exports both :results output
systemctl --user start  postgresql.service
systemctl --user status  postgresql.service
#+end_src

#+RESULTS:
#+begin_example
● postgresql.service
   Loaded: loaded (/nix/store/32xm7dcwlnjais6b42iaa8jh4zkfc3ji-postgresql.service/postgresql.service; linked; vendor preset: enabled)
   Active: active (running) since Sun 2020-03-29 23:11:28 EDT; 15min ago
 Main PID: 3542 (mp0sg0q78h9bwa0)
   CGroup: /user.slice/user-1000.slice/user@1000.service/postgresql.service
           ├─3542 /nix/store/828g2nqfgivscv79xykkmgjk0znll08l-bash-4.4-p23/bin/bash -e /nix/store/mp0sg0q78h9bwa0z45x4n4alc0ffg24f-run-postgresql
           ├─3551 /nix/store/gl7xj33j9fsklbwlgwlgdw6ggj57l7fh-postgresql-11.7/bin/postgres -k /var/db/postgresql/11
           ├─3563 postgres: checkpointer
           ├─3564 postgres: background writer
           ├─3565 postgres: walwriter
           ├─3566 postgres: autovacuum launcher
           ├─3567 postgres: stats collector
           └─3568 postgres: logical replication launcher
#+end_example


* Deploy osquery

**  enable osquery Service
#+begin_src sh :async t :exports both :results output
sudo mkdir -p /var/osquery/log
sudo chown $USER /var/osquery
#+end_src

#+begin_src sh :async t :exports both :results output
systemctl --user status osquery.service
#+end_src

#+RESULTS:
: ● osquery.service
:    Loaded: loaded (/nix/store/mxpjazyy6b4hymxk9hkivfs1kqk7jvly-osquery.service/osquery.service; linked; vendor preset: enabled)
:    Active: active (running) since Fri 2020-03-27 02:49:17 EDT; 37s ago
:  Main PID: 26822 (osqueryd)
:    CGroup: /user.slice/user-1000.slice/user@1000.service/osquery.service
:            ├─26822 /nix/store/acx6mvslzxbzw7fyl4nr87m9pybb9wmn-osquery-4.2.0/bin/osqueryd --database_path /var/osquery/osquery.db --logger_path /var/osquery/log --pidfile /var/osquery/osqueryd.pidfile --database_path /var/osquery/osquery.db --extensions_socket /var/osquery/osquery.em --config_path /home/test/.osquery/osquery.conf
:            └─26841 /nix/store/acx6mvslzxbzw7fyl4nr87m9pybb9wmn-osquery-4.2.0/bin/osqueryd

* Deploy ELK
**  Start Elastic service
create ~/var/lib/elasticsearch/~ and make yourself the owner of that directory
#+begin_src sh :async t :exports both :results output
sudo mkdir -p /var/lib/elasticsearch/
sudo chown $USER /var/lib/elasticsearch/
#+end_src

start service
#+begin_src sh :async t :exports both :results output
systemctl --user start elasticsearch.service
systemctl --user status elasticsearch.service
#+end_src

#+RESULTS:
: ● elasticsearch.service
:    Loaded: loaded (/nix/store/8dncyqmv46xa6j3cr52czs3ky86nsiyh-elasticsearch.service/elasticsearch.service; linked; vendor preset: enabled)
:    Active: active (running) since Mon 2020-03-23 19:37:34 EDT; 8min ago
:  Main PID: 24715 (java)
:    CGroup: /user.slice/user-1000.slice/user@1000.service/elasticsearch.service
:            ├─24715 /nix/store/8wmf6apz3yss4vz67z6xdwhhd08yz4cb-openjdk-headless-8u222-ga-jre/bin/java -Xms1g -Xmx1g -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -Des.networkaddress.cache.ttl=60 -Des.networkaddress.cache.negative.ttl=10 -XX:+AlwaysPreTouch -Xss1m -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djna.nosys=true -XX:-OmitStackTraceInFastThrow -Dio.netty.noUnsafe=true -Dio.netty.noKeySetOptimization=true -Dio.netty.recycler.maxCapacityPerThread=0 -Dlog4j.shutdownHookEnabled=false -Dlog4j2.disable.jmx=true -Djava.io.tmpdir=/tmp/elasticsearch-5006850798322202895 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=data -XX:ErrorFile=logs/hs_err_pid%p.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -Xloggc:logs/gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=32 -XX:GCLogFileSize=64m -Des.path.home=/var/lib/elasticsearch -Des.path.conf=/var/lib/elasticsearch/config -Des.distribution.flavor=default -Des.distribution.type=tar -cp /nix/store/6czj00nnxdzr18by4n3rqlfcp0csak0b-elasticsearch-6.8.3/lib/* org.elasticsearch.bootstrap.Elasticsearch
:            └─24810 /var/lib/elasticsearch/modules/x-pack-ml/platform/linux-x86_64/bin/controller

*  Performance
** PF_RING
#+begin_src sh :async t :exports both :results output
nix-shell ~/.config/nixpkgs/pkgs/network/pf_ring_model.nix --command "sudo make install && sudo modprobe pf_ring"
#+end_src
#+RESULTS:

- Output test
#+begin_src sh :async t :exports both :results output
modinfo pf_ring && cat /proc/net/pf_ring/info
#+end_src

#+RESULTS:
#+begin_example
filename:       /lib/modules/4.19.0-8-amd64/kernel/net/pf_ring/pf_ring.ko
alias:          net-pf-27
version:        7.6.0
description:    Packet capture acceleration and analysis
author:         ntop.org
license:        GPL
srcversion:     A80A92A0F9D4CB8168B549A
depends:
retpoline:      Y
name:           pf_ring
vermagic:       4.19.0-8-amd64 SMP mod_unload modversions
parm:           min_num_slots:Min number of ring slots (uint)
parm:           perfect_rules_hash_size:Perfect rules hash size (uint)
parm:           enable_tx_capture:Set to 1 to capture outgoing packets (uint)
parm:           enable_frag_coherence:Set to 1 to handle fragments (flow coherence) in clusters (uint)
parm:           enable_ip_defrag:Set to 1 to enable IP defragmentation(only rx traffic is defragmentead) (uint)
parm:           quick_mode:Set to 1 to run at full speed but with upto one socket per interface (uint)
parm:           force_ring_lock:Set to 1 to force ring locking (automatically enable with rss) (uint)
parm:           enable_debug:Set to 1 to enable PF_RING debug tracing into the syslog, 2 for more verbosity (uint)
parm:           transparent_mode:(deprecated) (uint)
PF_RING Version          : 7.6.0 (master:48b1e116fc0258cc0db1eb69363636aec8f85647)
Total rings              : 0

Standard (non ZC) Options
Ring slots               : 4096
Slot version             : 17
Capture TX               : Yes [RX+TX]
IP Defragment            : No
Socket Mode              : Standard
Cluster Fragment Queue   : 0
Cluster Fragment Discard : 0
#+end_example
